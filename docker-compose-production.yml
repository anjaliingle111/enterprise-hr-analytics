version: '3.8'

services:
  # PostgreSQL with proper configuration for CDC
  postgres:
    image: postgres:15
    container_name: hr-postgres
    environment:
      POSTGRES_DB: hrdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_MULTIPLE_DATABASES: hrdb,metadata_db
    command: >
      postgres 
      -c wal_level=logical 
      -c max_replication_slots=4 
      -c max_wal_senders=4
      -c shared_preload_libraries=pg_stat_statements
      -c track_activity_query_size=2048
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_min_duration_statement=1000
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hr_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Zookeeper with proper configuration
  zookeeper:
  image: confluentinc/cp-zookeeper:7.4.0
  container_name: hr-zookeeper
  environment:
    ZOOKEEPER_CLIENT_PORT: 2181
    ZOOKEEPER_TICK_TIME: 2000
    ZOOKEEPER_SERVER_ID: 1
    ZOOKEEPER_SERVERS: hr-zookeeper:2888:3888
    ZOOKEEPER_HEAP_OPTS: "-Xmx512m -Xms512m"  # Add memory limits
  volumes:
    - zookeeper_data:/var/lib/zookeeper/data
    - zookeeper_logs:/var/lib/zookeeper/log
  networks:
    - hr_network
  restart: unless-stopped
  mem_limit: 1g  # Add container memory limit
  ports:
    - "2181:2181"

  # Kafka with production settings
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: hr-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - hr_network
    deploy:
      resources:
        limits:
          memory: 2G

  # Schema Registry for schema evolution
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: hr-schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: backward
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hr_network

  # Kafka Connect with Debezium
  kafka-connect:
    image: debezium/connect:2.4
    container_name: hr-kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: hr-connect-cluster
      CONFIG_STORAGE_TOPIC: hr-connect-configs
      OFFSET_STORAGE_TOPIC: hr-connect-offsets
      STATUS_STORAGE_TOPIC: hr-connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_connect_data:/kafka/data
    networks:
      - hr_network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: hr-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: hr-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: hr-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - hr_network

  # ksqlDB for stream processing
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.4.0
    container_name: hr-ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://kafka-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
      - hr_network

  # ksqlDB CLI
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.4.0
    container_name: hr-ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - hr_network

  # Spark for batch processing
  spark-master:
    image: bitnami/spark:3.5
    container_name: hr-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark_data:/opt/bitnami/spark/data
      - ./spark/jars:/opt/bitnami/spark/ivy:z
    networks:
      - hr_network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: hr-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master
    volumes:
      - spark_data:/opt/bitnami/spark/data
    networks:
      - hr_network

  # Grafana for monitoring and alerting
  grafana:
    image: grafana/grafana:10.0.0
    container_name: hr-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
      GF_INSTALL_PLUGINS: grafana-postgresql-datasource,grafana-kafka-datasource
      GF_FEATURE_TOGGLES_ENABLE: ngalert
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hr_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hr_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - hr_network

  # MinIO for data lake storage
  minio:
    image: minio/minio:latest
    container_name: hr-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - hr_network

  # Apache Airflow for orchestration
  airflow-webserver:
    image: apache/airflow:2.8.1-python3.11
    container_name: hr-airflow-webserver
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres_pass@postgres/airflow_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres_pass@postgres/airflow_db
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'Zv41kk-_y6T4Z8Ny4uGgUYQq3oGBkJktWcR8tFfJeFs='
      AIRFLOW__WEBSERVER__SECRET_KEY: 'a25mQ1FHTUh3MnFRSk5KMEIyVVU2YmN0VGRyYTVXY08='
    ports:
      - "8090:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - hr_network

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  kafka_connect_data:
  spark_data:
  grafana_data:
  prometheus_data:
  redis_data:
  minio_data:

networks:
  hr_network:
    driver: bridge
    name: hr_network