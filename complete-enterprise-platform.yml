version: '3.8'

networks:
  enterprise_network:
    driver: bridge

services:
  # === DATA WAREHOUSE ===
  postgres:
    image: postgres:15
    container_name: enterprise-postgres
    networks: [enterprise_network]
    environment:
      POSTGRES_DB: hrdb
      POSTGRES_USER: hr_user
      POSTGRES_PASSWORD: hr_pass
    ports: ["5432:5432"]
    volumes: 
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hr_user -d hrdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === KAFKA ECOSYSTEM ===
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: enterprise-zookeeper
    networks: [enterprise_network]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    ports: ["2181:2181"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: enterprise-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks: [enterprise_network]
    ports: ["9092:9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: enterprise-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://enterprise-kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: enterprise-schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    networks: [enterprise_network]
    ports: ["8081:8081"]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: enterprise-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: enterprise-kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === CDC & STREAM PROCESSING ===
  kafka-connect:
    image: debezium/connect:2.4
    container_name: enterprise-kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks: [enterprise_network]
    ports: ["8083:8083"]
    environment:
      BOOTSTRAP_SERVERS: enterprise-kafka:9092
      GROUP_ID: enterprise-connect-group
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 3

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.4.0
    container_name: enterprise-ksqldb-server
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks: [enterprise_network]
    ports: ["8088:8088"]
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: enterprise-kafka:9092
      KSQL_HOST_NAME: enterprise-ksqldb-server
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://enterprise-schema-registry:8081
      KSQL_KSQL_CONNECT_URL: http://enterprise-kafka-connect:8083
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/info"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === WORKFLOW ORCHESTRATION ===
  airflow-webserver:
    image: apache/airflow:2.7.2
    container_name: enterprise-airflow-webserver
    networks: [enterprise_network]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://hr_user:hr_pass@enterprise-postgres/hrdb
      AIRFLOW__CORE__FERNET_KEY: Zv9yzCgM-P8WsEJQ7Q5YmG7Q8UbD3X9WqH1KLyHMF7o=
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__WEBSERVER__SECRET_KEY: enterprise_hr_analytics_secret_key_2025
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    ports: ["8080:8080"]
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: >
      bash -c "airflow db init && 
               airflow users create --role Admin --username admin --email admin@enterprise.com --firstname Admin --lastname User --password admin || true &&
               airflow webserver"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.7.2
    container_name: enterprise-airflow-scheduler
    networks: [enterprise_network]
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://hr_user:hr_pass@enterprise-postgres/hrdb
      AIRFLOW__CORE__FERNET_KEY: Zv9yzCgM-P8WsEJQ7Q5YmG7Q8UbD3X9WqH1KLyHMF7o=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: airflow scheduler
    restart: unless-stopped

  # === DATA PROCESSING ===
  enterprise-producer:
    image: python:3.11
    container_name: enterprise-producer
    networks: [enterprise_network]
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes: ["./:/app"]
    working_dir: /app
    command: tail -f /dev/null
    restart: unless-stopped

  # === MONITORING & VISUALIZATION ===
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise-grafana
    networks: [enterprise_network]
    ports: ["3000:3000"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-postgresql-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  grafana_data: